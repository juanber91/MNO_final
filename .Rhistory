}
}
maxiter <- 5000
# Problema 3 -------------------------------------------------------------
mu <- 10
t0 <- 10;
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(0.01,0.01)
x0 <- c(5,5)
p_ast <- fx(x_ast)
while(2/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
}
tol <- 1e-8
# Problema 3 -------------------------------------------------------------
mu <- 10
t0 <- 10;
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(0.01,0.01)
x0 <- c(5,5)
p_ast <- fx(x_ast)
while(2/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
}
tol <- 1e-6
# Problema 3 -------------------------------------------------------------
mu <- 10
t0 <- 10;
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(0.01,0.01)
x0 <- c(5,5)
p_ast <- fx(x_ast)
while(2/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
}
tol_backtracking <- 1e-8
maxiter <- 5000
mu <- 2
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) -
log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) - log(x[1]) - log(x[2])
}
}
fx <- function(x) {
t0*(x[1]^2 + x[2]^2 + x[3]^2 } x[4]^2 - 2*x[1] - 3*x[4] -
3)
fx <- function(x) {
t0*(x[1]^2 + x[2]^2 + x[3]^2 } x[4]^2 - 2*x[1] - 3*x[4] - 3)
# Problema 2 -------------------------------------------------------------
mu <- 100
t0 <- 10;
fx <- function(x) {
t0*(x[1]^2 + x[2]^2 + x[3]^2 - x[4]^2 - 2*x[1] - 3*x[4] -
log(2*x[1] + x[2] + x[3] + 4*x[4] - 6) -
log(-(2*x[1] + x[2] + x[3] + 4*x[4] - 6)) -
log(x[1] + x[2] + 2*x[3] + x[4] - 6) -
log(-(x[1] + x[2] + 2*x[3] + x[4] - 6)) -
log(x[1]) - log(x[2]) - log(x[3]) - log(x[4]) -
log(-x[1]) - log(-x[2]) - log(-x[3]) - log(-x[4]))
}
solucion <- c(0,0,0,0)
x_ast <- c(1.1232876712328763,0.6506849315068493,1.8287671232876714,0.5684931506849317)
x0 <- c(0,8,-1,0)
p_ast <- fx(x_ast)
p_ast
x0 <- c(0,8,1,0)
p_ast <- fx(x_ast)
max(0,1)
max(0,x)
x=1:10
max(0,x)
f_penal <- function(x) {
1e10 * max(0,x)
}
any(2,3)
check <- which(x[1]+x[2]-6 <= 0, 18-x[1]-2*x[2] <= 0, x[1] <= 0, x[2] <= 0)
check <- which((x[1]+x[2]-6 <= 0, 18-x[1]-2*x[2] <= 0, x[1] <= 0, x[2] <= 0))
check <- which(c(x[1]+x[2]-6 <= 0, 18-x[1]-2*x[2] <= 0, x[1] <= 0, x[2] <= 0))
check
check <- which(c(x[1]+x[2]-6 <= 0, 18-x[1]-2*x[2] <= 0, x[1] <= 0, x[2] <= 0), arr.ind = T)
check
x=-1:10
check <- which(c(x[1]+x[2]-6 <= 0, 18-x[1]-2*x[2] <= 0, x[1] <= 0, x[2] <= 0), arr.ind = T)
check
# Problema 1 -------------------------------------------------------------
t0 <- 10;
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) -
f_penal(log(x[1]+x[2]-6)) -
f_penal(log(18-x[1]-2*x[2])) -
f_penal(log(x[1])) -
f_penal(log(x[2]))
}
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) -
max(0, log(x[1]+x[2]-6)) -
max(0, log(18-x[1]-2*x[2])) -
max(0, log(x[1])) -
max(0, log(x[2]))
}
}
fx <- function(x) {
t0*(2*x[1]+5*x[2]) -
max(0, log(x[1]+x[2]-6)) -
max(0, log(18-x[1]-2*x[2])) -
max(0, log(x[1])) -
max(0, log(x[2]))
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) -
max(0, log(x[1]+x[2]-6)) -
max(0, log(18-x[1]-2*x[2])) -
max(0, log(x[1])) -
max(0, log(x[2]))
}
}
log(0)
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) - log(x[1]) - log(x[2]) -
1e10*(x[1]+x[2]-6) - 1e10*(18-x[1]-2*x[2]) - 1e10*(x[1]) - 1e10*(x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) - log(x[1]) - log(x[2]) -
1e10*(x[1]+x[2]-6) - 1e10*(18-x[1]-2*x[2]) - 1e10*(x[1]) - 1e10*(x[2])
}
}
p_ast <- fx(x_ast)
p_ast
log(x[1]+x[2]-6)
x
rm(x)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
p_ast
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) - log(x[1]) - log(x[2]) +
1e10*(x[1]+x[2]-6) + 1e10*(18-x[1]-2*x[2]) + 1e10*(x[1]) + 1e10*(x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) - log(x[1]) - log(x[2]) +
1e10*(x[1]+x[2]-6) + 1e10*(18-x[1]-2*x[2]) + 1e10*(x[1]) + 1e10*(x[2])
}
}
fx(1,1)
fx(c(1,1))
fx(c(6,0.1))
fx(x0)
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(x[1]+x[2]-6) - log(18-x[1]-2*x[2]) - log(x[1]) - log(x[2]) -
1e10*(x[1]+x[2]-6) - 1e10*(18-x[1]-2*x[2]) - 1e10*(x[1]) - 1e10*(x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 2*x[1]+5*x[2]
t0*(2*x[1]+5*x[2]) - log(a - (x[1]+x[2]-6)) - log(a - (18-x[1]-2*x[2])) - log(a - x[1]) - log(a - x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log(a - (x[1]+x[2]-6)) - log(a - (18-x[1]-2*x[2])) - log(a - x[1]) - log(a - x[2])
}
}
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 1e10
t0*(2*x[1]+5*x[2]) - log(a - (x[1]+x[2]-6)) - log(a - (18-x[1]-2*x[2])) - log(a - x[1]) - log(a - x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
a <- 1e10
t0*(2*x[1]+5*x[2]) - log(a - (x[1]+x[2]-6)) - log(a - (18-x[1]-2*x[2])) - log(a - x[1]) - log(a - x[2])
}
}
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 1e6
t0*(2*x[1]+5*x[2]) - log(a - (x[1]+x[2]-6)) - log(a - (18-x[1]-2*x[2])) - log(a - x[1]) - log(a - x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
a <- 1e6
t0*(2*x[1]+5*x[2]) - log(a - (x[1]+x[2]-6)) - log(a - (18-x[1]-2*x[2])) - log(a - x[1]) - log(a - x[2])
}
}
backtracking <- function(alpha, beta, f, dir_desc, x, derivada_direccional) {
# In:
# alpha, beta parámetros del método por backtracking
# f función de Rn a R a minimizar
# dir_desc dirección de descenso en el punto x
# x punto en el que se buscará el tamaño de paso para la dirección de descenso dada
# grad_f gradiente de f en x
# Out:
# t tamaño de paso
optim
t <- 1
if(alpha > 0.5) {
print('alpha de backtracking debe ser menor o igual a 1/2')
t <-  -1
}
if(beta > 1) {
print('beta de backtracking debe ser menor a 1')
t <-  -1
}
if(t != -1) {
eval1 <- f(x + t * dir_desc)
eval2 <- f(x) + alpha * t * derivada_direccional
while (eval1 > eval2) {
t     <- beta * t
eval1 <- f(x + t * dir_desc)
eval2 <- f(x) + alpha * t * derivada_direccional
}
} else {
t <- -1
}
return(t)
}
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 2*x[1]+5*x[2]
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2])
}
}
# Problema 3 -------------------------------------------------------------
mu <- 10
t0 <- 10;
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(0.01,0.01)
x0 <- c(5,5)
p_ast <- fx(x_ast)
while(2/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
}
backtracking <- function(alpha, beta, f, dir_desc, x, derivada_direccional) {
# In:
# alpha, beta parámetros del método por backtracking
# f función de Rn a R a minimizar
# dir_desc dirección de descenso en el punto x
# x punto en el que se buscará el tamaño de paso para la dirección de descenso dada
# grad_f gradiente de f en x
# Out:
# t tamaño de paso
optim
t <- 0.001
if(alpha > 0.5) {
print('alpha de backtracking debe ser menor o igual a 1/2')
t <-  -1
}
if(beta > 1) {
print('beta de backtracking debe ser menor a 1')
t <-  -1
}
if(t != -1) {
eval1 <- f(x + t * dir_desc)
eval2 <- f(x) + alpha * t * derivada_direccional
while (eval1 > eval2) {
t     <- beta * t
eval1 <- f(x + t * dir_desc)
eval2 <- f(x) + alpha * t * derivada_direccional
}
} else {
t <- -1
}
return(t)
}
# Problema 3 -------------------------------------------------------------
mu <- 10
t0 <- 10;
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(0.01,0.01)
x0 <- c(5,5)
p_ast <- fx(x_ast)
while(2/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(x[1]^2 + (x[2] + 1)^2) - log(x[1]) - log(x[2])
}
}
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 2*x[1]+5*x[2]
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2]) -
1e10 * (x[1] + x[2]) + 1e10 * (18-x[1]-2*x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2]) -
1e10 * (x[1] + x[2]) + 1e10 * (18-x[1]-2*x[2])
}
}
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 2*x[1]+5*x[2]
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2])
}
}
# Problema 1 -------------------------------------------------------------
t0 <- 10;
fx <- function(x) {
a <- 2*x[1]+5*x[2]
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2]) -
1e10 * (x[1] + x[2]) - 1e10 * (18-x[1]-2*x[2])
}
solucion <- c(0,0)
x_ast <- c(6,0.01)
x0 <- c(15,1)
p_ast <- fx(x_ast)
while(4/t0 > tol) {
resultados <- newton_Axib(f = fx, x_ast = x_ast, p_ast = p_ast, x0 = x0,
tol = tol, tol_backtracking = tol_backtracking,
maxiter = maxiter)
solucion <- resultados$x
t0 <- t0*mu
fx <- function(x) {
t0*(2*x[1]+5*x[2]) - log((x[1]+x[2]-6)) - log((18-x[1]-2*x[2])) - log(x[1]) - log(x[2]) -
1e10 * (x[1] + x[2]) - 1e10 * (18-x[1]-2*x[2])
}
}
